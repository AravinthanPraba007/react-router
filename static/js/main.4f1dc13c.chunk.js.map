{"version":3,"sources":["Components/Nav.js","Components/Welcome.js","Components/Login.js","Components/Signup.js","Components/ForgetPassword.js","App.js","serviceWorker.js","index.js"],"names":["Nav","navStyle","color","className","style","to","Welcome","Login","history","onClick","push","Signup","ForgetPassword","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"4OAyBeA,MArBf,WAEI,IAAMC,EAAW,CACbC,MAAO,SAGX,OACI,6BACI,6CACA,wBAAIC,UAAU,aACV,kBAAC,IAAD,CAAMC,MAAOH,EAAUI,GAAG,WAC1B,uCAED,kBAAC,IAAD,CAAMD,MAAOH,EAAUI,GAAG,UAC1B,yCCPAC,MARf,WACE,OACE,6BACE,+CCyBSC,MA5Bf,YAA2B,IAAXC,EAAU,EAAVA,QAWd,OACE,6BACE,2CACA,yBAAKL,UAAU,gBACf,4BAAQM,QATZ,WACED,EAAQE,KAAK,qBAQX,mBAIA,4BAAQD,QAjBV,WACID,EAAQE,KAAK,OAgBf,mBCFSC,MAjBf,YAA4B,IAAXH,EAAU,EAAVA,QAKf,OACE,6BACE,4CACA,yBAAKL,UAAU,gBACf,4BAAQM,QAPV,WACID,EAAQE,KAAK,OAMf,mB,OCSSE,MAlBf,YAAoC,IAAXJ,EAAU,EAAVA,QAMvB,OACE,6BACE,oDACA,yBAAKL,UAAU,gBACf,4BAAQM,QARV,WACID,EAAQE,KAAK,YAOf,oBCYSG,MAhBf,WACE,OACE,kBAAC,IAAD,KACA,yBAAKV,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACA,kBAAC,IAAD,CAAOW,KAAK,IAAIC,OAAK,EAACC,UAAWV,IACjC,kBAAC,IAAD,CAAOQ,KAAK,SAASC,OAAK,EAACC,UAAWT,IACtC,kBAAC,IAAD,CAAOO,KAAK,UAAUC,OAAK,EAACC,UAAWL,IACvC,kBAAC,IAAD,CAAOG,KAAK,kBAAkBC,OAAK,EAACC,UAAWJ,QCNjCK,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.4f1dc13c.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../App.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nfunction Nav() {\r\n\r\n    const navStyle = {\r\n        color: 'white'\r\n    };\r\n\r\n    return (\r\n        <nav>\r\n            <h3>React- Router</h3>\r\n            <ul className=\"nav-links\">\r\n                <Link style={navStyle} to=\"/signup\">\r\n                <li>SignUp</li>\r\n                </Link>\r\n               <Link style={navStyle} to=\"/login\">\r\n               <li>Login</li>\r\n               </Link>\r\n            </ul>\r\n        </nav>\r\n    );\r\n}\r\n\r\nexport default Nav;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Welcome() {\r\n  return (\r\n    <div>\r\n      <h1>Welcome Page </h1>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Welcome;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Login({history}) {\r\n\r\n    function handleHomeClick() {\r\n        history.push('/');\r\n  }\r\n\r\n  function handleForgetPasswordClick() {\r\n    history.push('/forgetPassword');\r\n}\r\n\r\n\r\n  return (\r\n    <div>\r\n      <h1>Login Page </h1>\r\n      <div className=\"button-style\">\r\n      <button onClick={handleForgetPasswordClick}>\r\n          Forget Password\r\n      </button>\r\n      \r\n      <button onClick={handleHomeClick}>\r\n          Back to Home\r\n      </button>\r\n      </div>\r\n     \r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction Signup({history}) {\r\n\r\n    function handleClick() {\r\n        history.push('/');\r\n  }\r\n  return (\r\n    <div>\r\n      <h1>Signup Page </h1>\r\n      <div className=\"button-style\">\r\n      <button onClick={handleClick}>\r\n          Back to Home\r\n      </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Signup;\r\n","import React from 'react';\r\nimport '../App.css';\r\n\r\nfunction ForgetPassword({history}) {\r\n    \r\n    function handleLoginClick() {\r\n        history.push('/login');\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <h1>ForgetPassword Page </h1>\r\n      <div className=\"button-style\">\r\n      <button onClick={handleLoginClick}>\r\n          Back to Login\r\n      </button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default ForgetPassword;\r\n","import React from 'react';\nimport './App.css';\nimport Nav from './Components/Nav';\nimport Welcome from './Components/Welcome';\nimport Login from './Components/Login';\nimport Signup from './Components/Signup';\nimport {HashRouter as Router, Switch,Route} from 'react-router-dom';\nimport ForgetPassword from './Components/ForgetPassword';\n\nfunction App() {\n  return (\n    <Router> \n    <div className=\"App\">\n      <Nav/>\n      <Switch>\n      <Route path=\"/\" exact component={Welcome} />\n      <Route path=\"/login\" exact component={Login} />\n      <Route path=\"/signup\" exact component={Signup} />\n      <Route path=\"/forgetPassword\" exact component={ForgetPassword} />\n      </Switch>\n    </div>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}